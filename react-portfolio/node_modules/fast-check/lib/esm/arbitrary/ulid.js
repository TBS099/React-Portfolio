import { tuple } from './tuple.js';
import { integer } from './integer.js';
import { paddedUintToBase32StringMapper, uintToBase32StringUnmapper } from './_internals/mappers/UintToBase32String.js';
export function ulid() {
    const timestampPartArbitrary = integer({ min: 0, max: 0xffffffffffff });
    const randomnessPartOneArbitrary = integer({ min: 0, max: 0xffffffffff });
    const randomnessPartTwoArbitrary = integer({ min: 0, max: 0xffffffffff });
    return tuple(timestampPartArbitrary, randomnessPartOneArbitrary, randomnessPartTwoArbitrary).map(([date, random1, random2]) => {
        return [
            paddedUintToBase32StringMapper(10)(date),
            paddedUintToBase32StringMapper(8)(random1),
            paddedUintToBase32StringMapper(8)(random2),
        ].join('');
    }, (value) => {
        if (typeof value !== 'string' || value.length !== 26) {
            throw new Error('Unsupported type');
        }
        return [value.slice(0, 10), value.slice(10, 18), value.slice(18)].map(uintToBase32StringUnmapper);
    });
}
